def app = subprojects.find {it.name == "app"}
def domain = subprojects.find {it.name == "domain"}
def coveredProject = [app, domain]

apply plugin: 'jacoco'

configure(coveredProject) { prj ->
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.5"
    }

    def testTaskName
    def classDirectory

    if(project.name == "app") {
        testTaskName = "testDebugUnitTest"
        classDirectory = "tmp/kotlin-classes/debug"
    }
    if(project.name == "domain") {
        testTaskName = "test"
        classDirectory = "classes/kotlin/main"
    }

    task jacocoReport(type: JacocoReport, dependsOn: testTaskName) {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        reports {
            csv.enabled = true
            xml.enabled = false
            html.enabled = true
        }

        final fileFilter = [
                '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*'
        ]
        final kotlinTree = fileTree(dir: "${prj.buildDir}/${classDirectory}", excludes: fileFilter)
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrcKotlin = "${prj.projectDir}/src/main/kotlin"
        final mainSrcJava = "${prj.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrcJava, mainSrcKotlin])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: ["jacoco/${testTaskName}.exec"])
    }
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    tasks.withType(Test) {
        ignoreFailures true
    }

    def projects = coveredProject

    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        csv {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.csv')
        }
    }

    doFirst {
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}